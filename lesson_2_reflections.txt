What happens when you initialize a repository? Why do you need to do it?

	Initializing a repository makes it a git repository. This means that 
from now on all commits will be saved into a history that can be tracked and
easily accessed.

-----------------------------------------------------------------------------

How is the staging area different from the working directory and the repository? 
What value do you think it offers?

	The staging area is a middle ground between the working directory and the git repository.
It allows you to add any files you like to it (not strictly all of them) and from there you 
can send them to the repository. This allows for commit messages to be different among groups 
of file(s). The files in the staging area get committed and then added to the repository
with a certain message, and then other files in the working directory can be added with different
commit messages.

-----------------------------------------------------------------------------

How can you use the staging area to make sure you have one commit per logical change?

	By using the staging area, logical commit messages can be given to one {group of} file(s) at a
time.

-----------------------------------------------------------------------------

What are some situations when branches would be helpful in keeping your history organized? 
How would branches help?	

	Branches make it so that you have a copy of a project to work on that won't effect the main project.
If you add something that doesn't end up working, the history of the master branch won't be affected.

-----------------------------------------------------------------------------

How do the diagrams help you visualize the branch structure?

	The diagrams let me know what is connected to what, as far as branches go, and which commits can 
be accessed. They remind me of linked lists, in that everything has a parent except for the initial
commit at the very begining.

-----------------------------------------------------------------------------

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	By merging two branches together, the changes made for each branch are added together, provided 
there are no conflicts. The two banches' histories can also be accessed from this one merged state.
They are listed by time created, though, so it may be more useful to use git show to compare with 
parents rather than git diff.

-----------------------------------------------------------------------------

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	Merge conflicts are a real pain. However, by manually going into the code and changing/adding/
removing lines, it is more likely that the code will do as you want it to in the end. There are times
when a simple automatic merge will suffice, though. These usually only go through when there are no 
merge conflicts, and therefore it is less likely these will harm our code.

-----------------------------------------------------------------------------

